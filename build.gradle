import org.gradle.api.JavaVersion
import org.gradle.api.plugins.JavaPluginExtension
import org.gradle.jvm.toolchain.JavaLanguageVersion

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'fr.loupgarou'
description = 'Plugin Loup-Garou pour Minecraft'

// --- Global Java Compatibility Settings ---
// Définition de la version de compilation et d'exécution du code à un niveau global
sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

// --- Gestion de la Version par Tag GitHub ---
def gitTag = System.getenv("GITHUB_TAG")

// Si on a un tag valide, on l'utilise comme version, sinon fallback à la version actuelle
if (gitTag != null && gitTag.matches(/\d+\.\d+\.\d+/)) {
    version = gitTag
} else if (version == 'unspecified' || version == '0.0.0-SNAPSHOT') {
    version = '1.0.0-SNAPSHOT' // Utilisation d'un SNAPSHOT par défaut en local
}

println "Plugin version: $version"

// --- Configuration Java Toolchain (Correction de l'erreur Major Version 65) ---
java {
    // Configuration de la Toolchain pour s'assurer que Gradle utilise Java 21 pour l'exécution des tâches (:shadowJar)
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Configuration de la compilation
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    // Activation des warnings de dépréciation et d'unchecked
    options.compilerArgs += ['-Xlint:deprecation', '-Xlint:unchecked']
}

// --- Définition des Dépôts ---
repositories {
    mavenCentral()

    // Repository PaperMC (recommandé pour les versions récentes)
    maven {
        name = 'papermc'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }

    // Repository WorldGuard/WorldEdit
    maven {
        name = 'sk89q-repo'
        url = 'https://maven.enginehub.org/repo/'
    }

    // Repository bStats
    maven {
        name = 'CodeMC'
        url = 'https://repo.codemc.org/repository/maven-public/'
    }
}

// --- Dépendances ---
dependencies {
    // Paper API (recommandé pour Minecraft 1.21+)
    compileOnly 'io.papermc.paper:paper-api:1.21.1-R0.1-SNAPSHOT'

    // WorldGuard (optionnel, assurez-vous de prendre la bonne version, 7.0.9 ici)
    compileOnly 'com.sk89q.worldguard:worldguard-bukkit:7.0.9'

    // Gson pour parser le JSON
    implementation 'com.google.code.gson:gson:2.10.1'

    // bStats (sera inclus dans le JAR via shadowJar)
    implementation 'org.bstats:bstats-bukkit:3.0.2'
}

// --- Tâche pour traiter les ressources (plugin.yml, etc.) ---
processResources {
    filteringCharset = 'UTF-8'

    // Remplace les variables dans plugin.yml
    filesMatching('plugin.yml') {
        expand(
                'version': project.version,
                'name': project.name,
                'description': project.description
        )
    }
}

// --- Configuration du JAR (non-shadowed) ---
jar {
    archiveBaseName = 'LoupGarou'
    archiveVersion = project.version
    archiveClassifier = ''

    // Ajouter un manifest détaillé
    manifest {
        attributes(
                'Built-By': System.getProperty('user.name'),
                'Build-Timestamp': new Date().format('yyyy-MM-dd HH:mm:ss'),
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')} ${System.getProperty('java.vm.version')})",
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
}

// --- Configuration du Shadow JAR (le JAR final) ---
shadowJar {
    archiveBaseName = 'LoupGarou'
    archiveVersion = project.version
    archiveClassifier = ''

    // Minimiser le JAR (enlever les classes non utilisées)
    minimize()

    // Relocate bStats pour éviter les conflits avec d'autres plugins sur le serveur
    relocate 'org.bstats', 'org.gh0st.loupgarou.bstats'

    // Relocate d'autres dépendances si vous les incluez et qu'elles pourraient poser problème
    relocate 'com.google.gson', 'org.gh0st.loupgarou.libs.gson'
}

// Tâche de nettoyage
clean {
    delete 'build'
}

// --- Tâche personnalisée pour afficher les informations de build ---
tasks.register('buildInfo') {
    group = 'build'
    description = 'Affiche les informations importantes du plugin après le build.'

    doLast {
        println ''
        println '╔════════════════════════════════════════╗'
        println '║     Plugin Loup-Garou Build Info      ║'
        println '╚════════════════════════════════════════╝'
        println "  Nom:         ${project.name}"
        println "  Version:     ${project.version}"
        println "  Description: ${project.description}"
        println "  Gradle:      ${gradle.gradleVersion}"
        println '  📊 bStats:   Activé (3.0.2)'
        println '═══════════════════════════════════════════'
        println ''
    }
}

// --- Dépendances des Tâches ---

// Assurer que buildInfo s'exécute après shadowJar pour afficher les infos à la fin
tasks.shadowJar.finalizedBy(tasks.buildInfo)

// Dépendance par défaut du build pour générer le Shadow JAR
tasks.build {
    dependsOn(tasks.shadowJar)
}

// Configuration des tests (si vous en avez)
test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
        showStandardStreams = false
    }
}

// Tâche pour copier le JAR dans un dossier de serveur de test (optionnel)
tasks.register('copyToServer', Copy) {
    group = 'build'
    description = 'Copie le Shadow JAR dans le dossier plugins/ du serveur de test.'

    dependsOn(tasks.shadowJar)
    from tasks.shadowJar.archiveFile
    into file('../test-server/plugins/')

    doLast {
        println "✅ Plugin copié vers le serveur de test !"
    }
}

// Messages de build (Cette logique est souvent déplacée vers buildInfo, mais on la garde ici)
gradle.buildFinished { result ->
    if (result.failure != null) {
        // En cas d'échec, le message final de votre log est affiché par Gradle lui-même.
        return
    }

    println ''
    println '╔════════════════════════════════════════╗'
    println '║        Build terminé avec succès !     ║'
    println '╚════════════════════════════════════════╝'
    println "  📦 Fichier JAR: build/libs/LoupGarou-${version}.jar"
    println '  🎮 Installation:'
    println '     1. Copiez le JAR dans plugins/'
    println '     2. Redémarrez le serveur'
    println '     3. Utilisez /lg aide'
    println '  📊 bStats: Statistiques activées'
    println '═══════════════════════════════════════════'
    println ''
}
